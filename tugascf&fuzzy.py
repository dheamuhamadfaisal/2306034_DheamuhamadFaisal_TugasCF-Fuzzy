# -*- coding: utf-8 -*-
"""TugasCF&Fuzzy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p10Jur-g-Zu5jn5hsICo3KLeaYCHSr0U

**Pengubahan Nilai CF**

Kesimpulan dari kode dibawah Kode ini mensimulasikan sistem pakar sederhana yang menggunakan metode Certainty Factor (CF) untuk mendiagnosis penyakit. CF yang tinggi (mendekati 1) menunjukkan tingkat keyakinan yang kuat bahwa pasien mengalami flu, sedangkan CF yang rendah menunjukkan kemungkinan lemah atau tidak ada.
"""

# Data input dari user
gejala_user = {
    "demam": 0.7,
    "batuk": 0.5,
    "sakit_tenggorokan": 0.6
}

# Data pengetahuan pakar untuk penyakit flu
pengetahuan = {
    "flu": {
        "demam": 0.9,
        "batuk": 0.8,
        "sakit_tenggorokan": 0.7
    }
}

# Fungsi untuk menghitung Certainty Factor (CF)
def hitung_cf(gejala_user, pengetahuan_pakar):
    cf_total = 0
    first = True

    for gejala, cf_user in gejala_user.items():
        if gejala in pengetahuan_pakar:
            cf_pakar = pengetahuan_pakar[gejala]
            cf = cf_user * cf_pakar

            if first:
                cf_total = cf
                first = False
            else:
                cf_total = cf_total + cf * (1 - cf_total)  # Menggunakan metode CF Combine positif

    return cf_total

# Hitung CF untuk diagnosis flu
cf_flu = hitung_cf(gejala_user, pengetahuan["flu"])

# Tampilkan hasil
print(f"CF diagnosis Flu: {cf_flu:.2f}")

"""**Penambahan 5 Gejala Baru**

Kesimpulan dari kode ini adalah sistem pakar sederhana yang menggunakan metode Certainty Factor untuk mendiagnosis penyakit flu berdasarkan gejala. Dengan mengalikan dan menggabungkan tingkat keyakinan dari pasien dan pakar, sistem ini memberikan nilai probabilistik mengenai kemungkinan diagnosis.

Jika "demam" diubah jadi 0.2, bagaimana hasilnya? Mengapa?

jika Jika "demam" diubah jadi 0.2 hasilnya akan berubah, karena mengurangi nilai demam,demam adalah gejala penting dan berada diurutan awal
"""

gejala_user = {
    "demam": 0.2,
    "batuk": 0.5,
    "sakit_tenggorokan": 0.6,
    "pilek": 0.8,
    "sakit_kepala": 0.5,
    "lelah": 0.6,
    "nyeri_otot": 0.7,
    "bersin": 0.6
}

pengetahuan = {
    "flu": {
        "demam": 0.2,
        "batuk": 0.7,
        "sakit_tenggorokan": 0.6,
        "pilek": 0.9,
        "sakit_kepala": 0.5,
        "lelah": 0.6,
        "nyeri_otot": 0.7,
        "bersin": 0.6
    }
}

def hitung_cf(gejala_user, pengetahuan_pakar):
    cf_total = 0
    first = True
    for gejala, cf_user in gejala_user.items():
        if gejala in pengetahuan_pakar:
            cf_pakar = pengetahuan_pakar[gejala]
            cf = cf_user * cf_pakar
            if first:
                cf_total = cf
                first = False
            else:
                cf_total = cf_total + cf * (1 - cf_total)
    return cf_total

cf_flu = hitung_cf(gejala_user, pengetahuan["flu"])
print(f"CF diagnosis Flu: {cf_flu:.2f}")

!pip install scikit-fuzzy

"""**Fuzzy Logic**

**Ubah input_suhu jadi 22°C. Apa yang terjadi?**
Sistem menganggap suhu akan cenderung dingin, tapi kelembaban cukup tinggi.

**Mengapa suhu 28°C memiliki nilai keanggotaan di "Nyaman" dan "Panas"?**

Karena dalam logika fuzzy, satu nilai bisa termasuk ke dalam lebih dari satu kategori (himpuan fuzzy) — dengan derajat tertentu.
"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt

# Input variables
temperature = ctrl.Antecedent(np.arange(15, 41, 1), 'temperature')
humidity = ctrl.Antecedent(np.arange(20, 101, 1), 'humidity')

# Output variable
fan_speed = ctrl.Consequent(np.arange(0, 101, 1), 'fan_speed')

# Membership functions for temperature
temperature['dingin'] = fuzz.trapmf(temperature.universe, [15, 15, 20, 24])
temperature['nyaman'] = fuzz.trimf(temperature.universe, [22, 26, 30])
temperature['panas'] = fuzz.trapmf(temperature.universe, [28, 32, 40, 40])

# Membership functions for humidity
humidity['kering'] = fuzz.trapmf(humidity.universe, [20, 20, 30, 45])
humidity['normal'] = fuzz.trimf(humidity.universe, [35, 50, 65])
humidity['lembab'] = fuzz.trapmf(humidity.universe, [55, 70, 100, 100])

# Membership functions for fan speed
fan_speed['mati'] = fuzz.trimf(fan_speed.universe, [0, 0, 25])
fan_speed['rendah'] = fuzz.trimf(fan_speed.universe, [0, 25, 50])
fan_speed['sedang'] = fuzz.trimf(fan_speed.universe, [25, 50, 75])
fan_speed['tinggi'] = fuzz.trimf(fan_speed.universe, [50, 75, 100])
fan_speed['maksimal'] = fuzz.trimf(fan_speed.universe, [75, 100, 100])

# Visualize membership functions
temperature.view()
humidity.view()
fan_speed.view()

# Define fuzzy rules
rule1 = ctrl.Rule(temperature['dingin'] & humidity['kering'], fan_speed['mati'])
rule2 = ctrl.Rule(temperature['dingin'] & humidity['normal'], fan_speed['mati'])
rule3 = ctrl.Rule(temperature['dingin'] & humidity['lembab'], fan_speed['rendah'])
rule4 = ctrl.Rule(temperature['nyaman'] & humidity['kering'], fan_speed['rendah'])
rule5 = ctrl.Rule(temperature['nyaman'] & humidity['normal'], fan_speed['sedang'])
rule6 = ctrl.Rule(temperature['nyaman'] & humidity['lembab'], fan_speed['tinggi'])
rule7 = ctrl.Rule(temperature['panas'] & humidity['kering'], fan_speed['tinggi'])
rule8 = ctrl.Rule(temperature['panas'] & humidity['normal'], fan_speed['tinggi'])
rule9 = ctrl.Rule(temperature['panas'] & humidity['lembab'], fan_speed['maksimal'])

# Create control system
ac_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9])
ac = ctrl.ControlSystemSimulation(ac_ctrl)

# Input values
ac.input['temperature'] = 30
ac.input['humidity'] = 60

# Compute result
ac.compute()
print(f"Untuk suhu 30°C dan kelembaban 75%, kecepatan kipas AC: {ac.output['fan_speed']:.2f}%")

# Visualize result
fan_speed.view(sim=ac)
plt.show()

